{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","id","alt","name","email","CardList","_ref","robots","CardComponent","map","user","i","components_Card","key","username","SearchBox","searchfield","searchchange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","console","log","fetch","then","response","json","users","_this3","filteredrobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAceA,EAZF,SAACC,GACV,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAMO,GAAhC,YAA8CC,IAAI,WAC1DP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cAAMH,EAAMS,MACZR,EAAAC,EAAAC,cAAA,aAAKH,EAAMU,UCWZC,EAjBE,SAAAC,GAAgB,IAAbC,EAAaD,EAAbC,OACVC,EAAgBD,EAAOE,IAAI,SAACC,EAAMC,GACpC,OAAQhB,EAAAC,EAAAC,cAACe,EAAD,CACJC,IAAKF,EACLV,GAAIM,EAAOI,GAAGV,GACdE,KAAMI,EAAOI,GAAGR,KAChBW,SAAUP,EAAOI,GAAGG,SACpBV,MAAOG,EAAOI,GAAGP,UAEzB,OACIT,EAAAC,EAAAC,cAAA,WAEKW,ICFEO,EAXG,SAAAT,GAAmCA,EAAhCU,YAAgC,IAAnBC,EAAmBX,EAAnBW,aAC9B,OACItB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,8BACVoB,KAAK,SACLC,YAAY,gBAAgBC,SAAUH,MCGvCI,cARD,SAAC3B,GACb,OACAC,EAAAC,EAAAC,cAAA,OAAKyB,MAAQ,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC7D/B,EAAMgC,YCqDIC,cAnDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAkBFI,eAAiB,SAAAC,GACfR,EAAKS,SAAS,CAAErB,YAAaoB,EAAME,OAAOC,SAlB1CX,EAAKY,MAAQ,CACXjC,OAAQ,GACRS,YAAa,IAJHY,mFAQM,IAAAa,EAAAV,KAClBW,QAAQC,IAAI,WAEZC,MAAM,8CACHC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJP,EAAKJ,SAAS,CAAE9B,OAAQyC,uCAQrB,IAAAC,EAAAlB,KACDmB,EAAiBnB,KAAKS,MAAMjC,OAAO4C,OAAO,SAAA5C,GAC9C,OAAOA,EAAOJ,KACXiD,cACAC,SAASJ,EAAKT,MAAMxB,YAAYoC,iBAOrC,OAAiC,IAA7BrB,KAAKS,MAAMjC,OAAO+C,OACb3D,EAAAC,EAAAC,cAAA,qBAGLF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAAC0D,EAAD,CAAWtC,aAAcc,KAAKI,iBAC9BxC,EAAAC,EAAAC,cAAC2D,EAAD,KACA7D,EAAAC,EAAAC,cAAC4D,EAAD,CAAUlD,OAAQ2C,aA5CVQ,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACLtE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqE,EAAD,OAIFC,SAASC,eAAe,SDkHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.768e50d1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n\r\n        <div className=\"bg-light-green dib br3 ma2 grow bw2 shadow-5 tc\">\r\n            <img src={`https://robohash.org/${props.id}?200x200`} alt=\"Robots\" />\r\n            <div>\r\n                <h2> {props.name}</h2>\r\n                <p> {props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n//import robots from './robots';\r\nconst CardList = ({ robots }) => {\r\n    const CardComponent = robots.map((user, i) => {\r\n        return (<Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            username={robots[i].username}\r\n            email={robots[i].email} />)\r\n    })\r\n    return (\r\n        <div>\r\n\r\n            {CardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchchange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest\"\r\n                type=\"search\"\r\n                placeholder=\"search robots\" onChange={searchchange} />\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll =(props) => {\r\n  return (\r\n  <div style ={{overflow:\"scroll\",border:'solid 5px black',height:'500px'}}>\r\n    {props.children}\r\n  </div>\r\n);\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\n//import { robots } from \"./robots\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"tachyons\";\r\nimport \"./App.css\";\r\nimport Scroll from '../components/Scroll';\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"fsgedfg\");\r\n    //this.setState({ robots: robots });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(users => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n  onSearchChange = event => {\r\n    this.setState({ searchfield: event.target.value });\r\n\r\n    //console.log(filteredrobots);\r\n  };\r\n  render() {\r\n    const filteredrobots = this.state.robots.filter(robots => {\r\n      return robots.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchfield.toLowerCase());\r\n    });\r\n    /*const filteredrobots = this.state.robots.filter(robots => {\r\n      return robots.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchfield.toLowerCase());\r\n    });*/\r\n    if (this.state.robots.length === 0) {\r\n      return <h1>Loading</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f2\"> RoboFriends</h1>\r\n          <SearchBox searchchange={this.onSearchChange} />\r\n          <Scroll>\r\n          <CardList robots={filteredrobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <div>\r\n        <App />\r\n    </div>\r\n\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}